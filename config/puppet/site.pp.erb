# Rendered: <%= Time.now.utc %>

######
##
##  Variables
##
######

$app_stage     = "<%= app_stage %>"
$app_domain    = "<%= app_domain %>"
$site_domain   = "<%= site_domain %>"
$app_deploy_to = "<%= app_deploy_to %>"
$app_name      = "<%= app_name %>"
$app_user      = "<%= app_user %>"
$app_group     = "<%= app_group %>"

<% if app_restrict == false %>
$app_restrict  = false
<% else %>
$app_restrict  = true
<% end %>

##
# Random minute for cron
##
$random_minute = "<%= rand(60) %>"

##
# Set path to templates
##
<%
config_path  = "/home/deploy/tmp/#{app_name}/#{app_stage}/puppet/templates"
%>
$config_path = "/home/deploy/tmp/#{app_name}/#{app_stage}/puppet/templates"


######
##
##  Defines
##
######

##
# Cron Job
#
# Thanks to <http://linuxman.wikispaces.com/Creating+a+cron+job+with+puppet>
# Call with enable => "false" to delete the job.
##

define cron_job( $enable = "true", $interval = "daily", $script = "", $package = "" ) {
	file { "/etc/cron.$interval/$name":
		content => $script,
		force   => true,
		owner   => root,
		group   => root,
		ensure  => $enable ? {
			"false" => absent,
			default => file,
		},
		mode => $interval ? {
			"d"     => 644,
			default => 755,
		},
		require => $package ? {
			""      => undef,
			default => Package[$package],
		},
	}
}


##
# Set up a MySQL database
##

define mysqldb( $user, $password, $host, $grant_to ) {
	exec { "create-${name}-db":
		unless => $app_stage ? {
			'dev'   => "/usr/bin/mysql -u${user} -pvagrant ${name}",
			default => "/usr/bin/mysql --defaults-file=.my.cnf -h ${db_host} ${name}",
		},
		command => $app_stage ? {
			'dev'   => "/usr/bin/mysql -uroot -pvagrant -e \"CREATE DATABASE IF NOT EXISTS ${name}; GRANT ALL ON ${name}.* TO ${user}@localhost IDENTIFIED BY '$password';\"",
			default => "/usr/bin/mysql --defaults-file=.my.cnf -h ${host} -e \"CREATE DATABASE IF NOT EXISTS ${name}; GRANT ALL ON ${name}.* TO ${user}@${grant_to} IDENTIFIED BY '$password';\"",
			require => Service["mysqld"],
		},
		cwd   => "/home/deploy",
	}
}


##
# Set up Varnish rules
##

define vcl_rules( $app_name, $procedure, $enabled = true ) {
	exec { "create-${name}-vcl-rules":
		unless   => "/bin/grep 'include \"/etc/varnish/sites/${app_name}/${procedure}.vcl\";' /etc/varnish/sites-${procedure}.vcl",
		command  => "/bin/echo 'include \"/etc/varnish/sites/${app_name}/${procedure}.vcl\";' | /usr/bin/tee -a /etc/varnish/sites-${procedure}.vcl",
		provider => shell,
	}
}


<% if app_stage == "dev" %>
######
##
##  Vagrant DNS override
##
######

file { "/etc/resolv.conf":
	owner  => root,
	group  => root,
	mode   => 644,
	source => "<%= config_path %>/etc/vagrant_resolv.conf"
}
<% end %>


######
##
## Create groups
##
######

group { "<%= app_user %>-homerw":
	ensure => present,
}

group { "<%= app_group %>":
	ensure => present,
}

group { "www-php-loggers":
	ensure => present,
}


######
##
## Create users
##
######

<% if app_stage == "dev" %>
user { "vagrant":
	ensure     => present,
	gid        => "<%= app_group %>",
	groups     => ["<%= app_user %>-homerw", "<%= app_group %>", "www-php-loggers"],
	membership => minimum,
}
<% end %>

user { "www-data":
	ensure     => present,
	groups     => ["<%= app_user %>-homerw"],
	membership => minimum,
}

<% app_access_users.each do |access_user| %>
user { "<%= access_user %>":
	ensure => present,

	<% if access_user == app_user %>
		groups   => ["www-php-loggers", "<%= app_user %>-homerw", "<%= app_group %>"],
		gid      => "<%= app_group %>",
		password => "*", # prevent password login entirely

		<% if app_stage == "dev" %>
			uid => 9999, # Set a manual UID to match the Vagrant synced folder
		<% end %>
	<% else %>
		groups => ["<%= app_user %>-homerw","<%= app_group %>"],
	<% end %>

	membership => minimum,
}
<% end %>


######
##
## Create home directories
##
######

file { "/home/<%= app_user %>":
	ensure => directory,
	owner  => <%= app_user %>,
	group  => <%= app_user %>-homerw,

	<% if app_stage == "dev" %>
	mode => 755,
	<% else %>
	mode => 770,
	<% end %>
}

# bin directory
file { "/home/<%= app_user %>/bin":
	ensure => directory,
	owner  => <%= app_user %>,
	group  => <%= app_group %>,
	mode   => 775,
}


######
##
##  NGINX
##
######

package { "nginx":
	ensure => installed
}


##
# NGINX config
##

file { "/etc/nginx/sites-available/<%= app_name %>":
	ensure => directory,
	owner  => root,
	group  => root,
	mode   => 755
}

file { "/etc/nginx/sites-available/<%= app_name %>/<%= app_stage %>":
	owner   => root,
	group   => root,
	mode    => 644,
	content => template("<%= config_path %>/nginx/default.erb"),
	require => Package["nginx"],
	notify  => Service["nginx"]
}

file { "/etc/nginx/sites-enabled/<%= app_name %>-<%= app_stage %>":
	ensure  => symlink,
	target  => "/etc/nginx/sites-available/<%= app_name %>/<%= app_stage %>",
	require => Package["nginx"],
	notify  => Service["nginx"]
}

file { "/etc/nginx/sites-enabled/default":
	ensure => absent,
}

<% if app_restrict != false %>
	# <%= app_restrict %>
	##
	# Add htpasswd, if necessary
	##

	file { [ "<%= app_deploy_to %>/shared", "<%= app_deploy_to %>/shared/config" ]:
		ensure => directory,
		mode   => 755
	}

	file { "<%= app_deploy_to %>/shared/config/htpasswd":
		ensure  => "present",
		content => "<%= app_restrict['user'] %>:{PLAIN}<%= app_restrict['password'] %>",
		mode    => '0644',
	}
<% end %>

<% if app_uploads_dir == true %>
	##
	# Uploads subdomain
	##

	file { "/home/<%= app_user %>/uploads.<%= site_domain %>":
		ensure => directory,
		owner  => <%= app_user %>,
		group  => <%= app_group %>,
		mode   => 775,
	}

	##
	# Only resolve uploads.{site_domain} on non-dev stages
	##
	file { "/etc/nginx/sites-available/<%= app_name %>/uploads":
		owner   => root,
		group   => root,
		mode    => 644,
		content => template("<%= config_path %>/nginx/uploads.erb"),
		require => Package["nginx"],
		notify  => Service["nginx"]
	}

	file { "/etc/nginx/sites-enabled/<%= app_name %>-uploads":
		ensure  => symlink,
		target  => "/etc/nginx/sites-available/<%= app_name %>/uploads",
		require => Package["nginx"],
		notify  => Service["nginx"]
	}
<% end %>


##
# Enable NGINX
##

service { "nginx":
	ensure     => running,
	hasrestart => true,
	require    => Package["nginx"],
	restart    => "/usr/sbin/nginx -t && /usr/sbin/service nginx reload"
}


######
##
##  PHP configuration
##
######

package { "php5-fpm":
	ensure => installed
}


##
# Render the PHP-FPM config
##

file { "/etc/php5/fpm/pool.d/<%= app_name %>.pool.conf":
	owner   => root,
	group   => root,
	mode    => 644,
	content => template("<%= config_path %>/php/php5-fpm.pool.conf.erb"),
}


##
# Enable PHP-FPM
##

service { "php5-fpm":
	ensure    => running,
	subscribe => [File["/etc/php5/fpm/pool.d/<%= app_name %>.pool.conf"],File["/home/<%= app_user %>/php/log"]],
	require   => Package["php5-fpm"],
}


##
# Set up PHP logging
##

file { "/home/<%= app_user %>/php":
	ensure  => directory,
	owner   => <%= app_user %>,
	group   => <%= app_group %>,
	require => Package["php5-fpm"]
}

file { "/home/<%= app_user %>/php/log":
	ensure  => directory,
	owner   => <%= app_user %>,
	group   => <%= app_group %>,
	require => Package["php5-fpm"]
}

file { "/home/<%= app_user %>/php/sessions":
	ensure  => directory,
	owner   => <%= app_user %>,
	group   => <%= app_group %>,
	require => Package["php5-fpm"]
}

file { "/home/<%= app_user %>/php/log/<%= app_name %>.access.log":
	ensure  => file,
	owner   => <%= app_user %>,
	group   => <%= app_group %>,
	require => Package["php5-fpm"]
}


######
##
##  Varnish
##
######

package { "varnish":
	ensure => installed
}

<% if app_stage == "dev" %>
# varnish config file for :80
file { "/etc/default/varnish":
	owner   => root,
	group   => root,
	source  => "<%= config_path %>/varnish/vagrant/vagrant_etc_default_varnish",
	require => Package["varnish"]
}
<% end %>


##
# Prerequisite directories and files for modular Varnish configuration
##

file { "/etc/varnish/sites":
	ensure => directory,
	owner  => root,
	group  => root
}

file { "/etc/varnish/sites-recv.vcl":
	ensure => present,
	owner  => root,
	group  => root
}

file { "/etc/varnish/sites-fetch.vcl":
	ensure => present,
	owner  => root,
	group  => root
}

file { "/etc/varnish/sites/<%= app_name %>":
	ensure => directory,
	owner  => root,
	group  => root
}


##
# Drop in this site's Varnish configurations
##

file { "/etc/varnish/sites/<%= app_name %>/recv.vcl":
	ensure  => file,
	owner   => root,
	group   => root,
	content => template("<%= config_path %>/varnish/recv.vcl.erb"),
}

file { "/etc/varnish/sites/<%= app_name %>/fetch.vcl":
	ensure  => file,
	owner   => root,
	group   => root,
	content => template("<%= config_path %>/varnish/fetch.vcl.erb"),
}


##
# Enable VCL rules from the sites-*.vcl files
##

vcl_rules { "<%= app_name %>-recv":
	app_name  => "<%= app_name %>",
	procedure => "recv",
	notify    => Service["varnish"]
}

vcl_rules { "<%= app_name %>-fetch":
	app_name  => "<%= app_name %>",
	procedure => "fetch",
	notify    => Service["varnish"]
}


##
# Start Varnish
##

service { "varnish":
	ensure  => running,
	require => Package["varnish"],

	<% if app_stage == "dev" %>
	subscribe => [File["/etc/default/varnish"]],
	<% end %>
}


######
##
##  Database
##
######

##
# Create DB
##

mysqldb { "<%= db_name %>":
	user     => "<%= db_user %>",
	password => "<%= db_password %>",
	host     => "<%= db_host %>",
	grant_to => "<%= db_grant_to %>",
}
